Question:https://leetcode.com/problems/rotting-oranges/description/

Solution:
/*

This is my dfs solution
class Solution {

    public void dfs(int[][] grid,int row,int col,int time) {

        if(row<0 || row>=grid.length || col<0 || col>=grid[0].length || grid[row][col]==0) return;

        if(grid[row][col]!=1 && grid[row][col]<time) return;

        grid[row][col] = time;

        dfs(grid,row+1,col,time+1);
        dfs(grid,row-1,col,time+1);
        dfs(grid,row,col+1,time+1);
        dfs(grid,row,col-1,time+1);
    }
    
    public int orangesRotting(int[][] grid) {
        
        int time = 2;

        for(int i=0;i<grid.length;i++) {
            for(int j=0;j<grid[0].length;j++) {
                if(grid[i][j]==2) {
                    dfs(grid,i,j,2);
                }
            }
        }

        for(int i=0;i<grid.length;i++) {
            for(int j=0;j<grid[0].length;j++) {
                if(grid[i][j]==1) {
                    return -1;
                }
                time = Math.max(time,grid[i][j]);
            }
        }

        return time-2;
    }
}*/

class Pair {
    int row;
    int col;

    public Pair(int r,int c) {
        this.row = r;
        this.col = c;
    }
}

class Solution {

    public int orangesRotting(int[][] grid) {

        Queue<Pair> queue = new LinkedList<>();

        int total_fresh_orange = 0, time=-1;

        for(int i=0;i<grid.length;i++) {
            for(int j=0;j<grid[0].length;j++) {
                if(grid[i][j]==1) {
                    total_fresh_orange++;
                }else if(grid[i][j]==2) {
                    queue.add(new Pair(i,j));

                }
            }
        }

        if(total_fresh_orange==0) return 0;

        int[] delRow = {+1,0,-1,0};
        int[] delCol = {0,+1,0,-1};

        while(!queue.isEmpty()) {

            int size = queue.size();
            time++;

            for(int i=0;i<size;i++) {

                Pair p = queue.poll();
                int row = p.row;
                int col = p.col;

                for(int k=0;k<4;k++) {
                    int newRow = row+delRow[k];
                    int newCol = col+delCol[k];

                    if(newRow>=0 && newRow<grid.length && newCol>=0 && newCol<grid[0].length) {

                        if(grid[newRow][newCol]==1) { 
                            total_fresh_orange--;
                            grid[newRow][newCol] = 2;
                            queue.add(new Pair(newRow,newCol));
                        }
                    }
                }
            }

            
        }

        return total_fresh_orange==0 ? time : -1;

    }
}
