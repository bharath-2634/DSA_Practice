Question :https://leetcode.com/problems/combination-sum-iii/description/

Solution:
class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<>();

        getCombinationSum(k,n,res,new ArrayList<>(),1);

        return res;
    }

    public void getCombinationSum(int k,int target,List<List<Integer>> res,List<Integer> ds,int idx) {

        if(ds.size()==k) {
            if(target==0) {
                res.add(new ArrayList<>(ds));
            }
            return;
        }

        // if(target==0) {
        //     res.add(new ArrayList<>(ds));
        //     return;
        // }

        for(int i=idx;i<=9;i++) {
            if(i<=target) {
                ds.add(i);
                getCombinationSum(k,target-i,res,ds,i+1);
                ds.remove(ds.size()-1);
            }
        }

    }
}
