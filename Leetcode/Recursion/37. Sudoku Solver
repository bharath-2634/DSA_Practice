Question: https://leetcode.com/problems/sudoku-solver/

Solution:
class Solution {
    public void solveSudoku(char[][] board) {
        getSudokuSolver(board);
    }

    public static boolean getSudokuSolver(char[][]board) {

        for(int i=0;i<board.length;i++) {
            for(int j=0;j<board[0].length;j++) {

                if(board[i][j]=='.') {
                    for(char t='1';t<='9';t++) {
                        if(isValidPlace(board,i,j,t)) {
                            board[i][j] = t;
                            if(getSudokuSolver(board)) return true;
                            else board[i][j]='.';
                        }
                    }
                    
                    return false;
                }

            }
        }

        return true;
    }

    public static boolean isValidPlace(char[][] board,int row,int col,char c) {

        for(int i=0;i<9;i++) {

            if(board[i][col]==c) return false;

            if(board[row][i]==c) return false;

            if(board[3*(row/3)+i/3][3*(col/3)+i%3]==c) return false;
        }

        return true;
        
    }
}
