Question :https://leetcode.com/problems/combination-sum-ii/description/

Solution:
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<>();
        getCombinationSum(candidates,target,res,new ArrayList<>(),0);

        return res;
    }

    public void getCombinationSum(int[] nums,int target,List<List<Integer>> res,List<Integer> ds,int idx) {

        // if(idx>=nums.length) return;

        if(target==0) {
            res.add(new ArrayList<>(ds));
            return;
        }

        for(int i=idx;i<nums.length;i++) {
            if(i>idx && nums[i] == nums[i-1]) {
                continue;
            }

            if(nums[i]<=target) {
                ds.add(nums[i]);
                getCombinationSum(nums,target-nums[i],res,ds,i+1);
                ds.remove(ds.size()-1);
            }
        }
    }
}
