Question :https://leetcode.com/problems/permutations/description/

Solution:
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        boolean[] used = new boolean[nums.length];
        getPermutation(nums,res,new ArrayList<>(),used);

        return res;
    }

    public void getPermutation(int[] nums,List<List<Integer>> res,List<Integer> ds,boolean[] used) {
        if(ds.size()==nums.length) {
            res.add(new ArrayList<>(ds));
            return;
        }

        for(int i=0;i<nums.length;i++) {
            if(!used[i]) {
                used[i] = true;
                ds.add(nums[i]);
                getPermutation(nums,res,ds,used);
                ds.remove(ds.size()-1);
                used[i] = false;
            }
        }
    }
}
