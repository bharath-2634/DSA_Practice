Question : https://leetcode.com/problems/sum-root-to-leaf-numbers/description/

Solution : 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    /*
    
    this is my recursive approach without space optimal 

    private List<List<Integer>> sumList = new ArrayList<>();

    public void getSumNumbers(TreeNode node,List<Integer> list) {

        if(node==null) return;

        if (node.left == null && node.right == null) {
            list.add(node.val);
            sumList.add(new ArrayList<>(list));
            list.remove(list.size() - 1);
            return;
        }

        list.add(node.val);
        getSumNumbers(node.left,list);
        getSumNumbers(node.right,list);

        list.remove(list.size()-1);
    }

    public int sumNumbers(TreeNode root) {
        
        if(root==null) return 0;

        getSumNumbers(root,new ArrayList<>());

        int result=0;
        for(List<Integer> list : sumList) {
            int sum=0;
            for(int num : list) sum = sum*10+num;
            result+=sum;
        }

        return result;
    }*/

    public int getSumNumbers(TreeNode node,int currentSum) {

        if(node==null) return 0;

        currentSum = currentSum*10 + node.val;

        if(node.left==null && node.right==null) {
            return currentSum;
        }

        int left = getSumNumbers(node.left,currentSum);
        int right = getSumNumbers(node.right,currentSum);

        return left+right;
    }


    public int sumNumbers(TreeNode root) {
        
        if(root==null) return 0;

        return getSumNumbers(root,0);
    }
}
