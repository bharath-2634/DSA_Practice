Question : https://leetcode.com/problems/path-sum-ii/description/

solution : 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public void  getPathSum(TreeNode node,int target,List<List<Integer>> res,List<Integer> ds) {

        if(node==null) return;

        ds.add(node.val);

        if(node.left==null && node.right==null && node.val==target) {
            res.add(new ArrayList<>(ds));
        }

        getPathSum(node.left,target-node.val,res,ds);
        getPathSum(node.right,target-node.val,res,ds);
        

        ds.remove(ds.size()-1);
    }

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();

        if(root==null) return res;

        // if(root.left==null && root.right==null && root.val==targetSum) {
        //     ds.add(root.val);
        //     res.add(new ArrayList<>(ds));
        //     return res;
        // }

        // targetSum-=root.val;
        // ds.add(root.val);
        getPathSum(root,targetSum,res,ds);
        // getPathSum(root.right,targetSum,res,ds);

        return res;
    }
}
