Question : https://leetcode.com/problems/balanced-binary-tree/

Solution : (Brute Force Approach -> Level-Order Traversal + Height Calculations on each step) 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private boolean isValid = true;
    public int checkIsBalanced(TreeNode node) {
        if(node==null) return 0;

        int left_height = checkIsBalanced(node.left);
        int right_height = checkIsBalanced(node.right);

        if(Math.abs(left_height - right_height) > 1) {
            isValid = false;
        }

        return 1+Math.max(left_height,right_height);
    }

    public boolean isBalanced(TreeNode root) {
        if(root==null) return true;

        checkIsBalanced(root);

        return isValid;
    }
}
