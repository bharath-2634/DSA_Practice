Question: https://leetcode.com/problems/maximum-depth-of-binary-tree/

Solution: 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    /*
    This is my iterative Approach
    public int maxDepth(TreeNode root) {
        int count=0;

        if(root==null) return count;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        while(!queue.isEmpty()) {
            int size = queue.size();
            count++;
            for(int i=0;i<size;i++) {
                TreeNode node = queue.poll();
                if(node.left!=null) queue.offer(node.left);
                if(node.right!=null) queue.offer(node.right);
            }
        }

        return count;
    }*/

    public int getMaxDepth(TreeNode node,int count) {
        if(node==null) return count;        
        return Math.max(getMaxDepth(node.left,count+1),getMaxDepth(node.right,count+1));
    }

    public int maxDepth(TreeNode root) {

        return getMaxDepth(root,0);
    }

}
