Question : https://leetcode.com/problems/subarray-sums-divisible-by-k/
Solution :
class Solution {
    /*
    public int subarraysDivByK(int[] nums, int k) {
        int count=0;

        for(int i=0;i<nums.length;i++) {
            int sum=0;
            for(int j=i;j<nums.length;j++) {
                sum+=nums[j];
                if(sum%k==0) {
                    count++;
                }
            }
        }

        return count;
    }*/

    public int subarraysDivByK(int[] nums, int k) {

        int count=0;
        Map<Integer,Integer> pMap = new HashMap<>();
        pMap.put(0,1); // reminder,freq

        int sum=0;

        for(int i=0;i<nums.length;i++) {
            sum+=nums[i];
            int reminder = sum%k;
            if(reminder<0) reminder+=k;

            if(pMap.containsKey(reminder)) {
                count+=pMap.get(reminder);
            }

            pMap.put(reminder,pMap.getOrDefault(reminder,0)+1);
        }

        return count;
    }

}
