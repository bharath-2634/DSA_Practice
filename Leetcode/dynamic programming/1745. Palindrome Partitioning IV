Question:https://leetcode.com/problems/palindrome-partitioning-iv/description/

Solution:
class Solution {
    /* This is recursive + memoization
    public boolean isPalindrome(String s,int i,int j) {
        while(i < j){
            if(s.charAt(i) != s.charAt(j)) return false;
            i++;
            j--;
        }
        return true;
    }

    public boolean checkPalindromePartition(String s,int idx,int count,Boolean[][] dp) {
        if(idx==s.length()) {
            return count==3? true : false;
        }

        if(count>3) return false;
        if(count<=3 && dp[idx][count]!=null) return dp[idx][count];

        for(int i=idx;i<s.length();i++) {
            // String sb = s.substring(idx,i+1);
            if(isPalindrome(s,idx,i)) {
                if(checkPalindromePartition(s,i+1,count+1,dp)) {
                    dp[idx][count] = true;
                    return true;
                }
                
            }
        }

        return false;

    }

    public boolean checkPartitioning(String s) {
        Boolean[][] dp = new Boolean[s.length()+1][4];

        return checkPalindromePartition(s,0,0,dp);
    }
    */

    public boolean checkPartitioning(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[s.length()+1][4];
        boolean[][] isPal = new boolean[n][n];

        for (int len = 1; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                if (s.charAt(i) == s.charAt(j)) {
                    if (len <= 2) {
                        isPal[i][j] = true;
                    } else {
                        isPal[i][j] = isPal[i + 1][j - 1];
                    }
                }
            }
        }

        dp[s.length()][0] = true;
        // dp[s.length()][1] = dp[s.length()][2] = dp[s.length()][0] = false;

        for(int i=s.length()-1;i>=0;i--) {
            for(int count=1;count<=3;count++) {
                // dp[i][count] = false;
                for(int j=i;j<s.length();j++) {
                    if(isPal[i][j] && dp[j+1][count-1]) {
                        dp[i][count] = true;
                        break;
                    }
                }
                
            }
        }

        return dp[0][3];
    }
}
