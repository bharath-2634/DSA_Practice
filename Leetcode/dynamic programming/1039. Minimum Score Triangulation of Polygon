Question:https://leetcode.com/problems/minimum-score-triangulation-of-polygon/

Solution:
/*
This is my Recursion + backtracking solution !
class Solution {

    public int getScore(int i,int j,int[] values,int[][] dp) {

        if(j-i<2) return 0;

        if(dp[i][j]!=0) return dp[i][j];

        int min_score = Integer.MAX_VALUE;
        for(int vert=i+1;vert<j;vert++) {
            int current_val = getScore(i,vert,values,dp) + getScore(vert,j,values,dp) + values[i]*values[j]*values[vert];
            min_score = Math.min(min_score,current_val);
        }

        return dp[i][j] = min_score;
    }

    public int minScoreTriangulation(int[] values) {

        if(values.length<3) return 0;
        
        int[][] dp = new int[values.length+1][values.length+1];

        return getScore(0,values.length-1,values,dp);
    }
}

/*
lets say we have n=4 and number of vertices will be 
(n-2)=2 
now I've to assign points like (0,2) (1,3)

 */


class Solution {
    public int minScoreTriangulation(int[] values) {
        if(values.length<3) return 0;
        
        int[][] dp = new int[values.length+1][values.length+1];

        // for(int i=0;i<values.length;i++) {
        //     for(int j=0;j<values.length;j++) {
        //         if(j-i < 2) {
        //             dp[i][j] = 0;
        //         }
        //     }
        // }

        for (int len=3;len<=values.length;len++) { 
            for (int i=0; i+len-1<values.length;i++) {
                int min_score = Integer.MAX_VALUE;
                int j = i+len-1;
                for(int k=i+1;k<j;k++) {
                    int current_val = values[i] * values[j] * values[k] + dp[i][k] + dp[k][j];
                    min_score = Math.min(min_score,current_val);
                }
                dp[i][j] = min_score;
            }
        }

        return dp[0][values.length-1];

    }
}
