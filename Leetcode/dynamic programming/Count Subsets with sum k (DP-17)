Question:https://www.geeksforgeeks.org/problems/perfect-sum-problem5633/1

Solution:
// class Solution {
   
//     public int getPerfectSum(int[] nums,int target,int n,int[][] dp) {
       
//       if(target==0) return 1;
       
//       if(n==0 && nums[0]==target) {
//           return 1;
//       }
//       if(n==0 && nums[0]!=target) {
//           return 0;
//       }
       
//       if(dp[n][target]!=0) {
//           return dp[n][target];
//       }
       
//       int notTake = getPerfectSum(nums,target,n-1,dp);
//       int take=0;
       
//       if(nums[n]<=target) {
//           take = getPerfectSum(nums,target-nums[n],n-1,dp);
//       }
       
//       return dp[n][target] = take+notTake;
//     }
   
//     public int perfectSum(int[] nums, int target) {
        
//         int[][] dp = new int[nums.length][target+1];
        
//         return getPerfectSum(nums,target,nums.length-1,dp);
//     }
// }

class Solution {
    
    public int perfectSum(int[] nums,int target) {
        
        int[][] dp = new int[nums.length][target+1];
        
        for(int i=0;i<nums.length;i++) {
            dp[i][0] = 1;
        }
        
        if (nums[0] == 0) {
            dp[0][0] = 2;
        } else {
            dp[0][0] = 1;
            if (nums[0] <= target) {
                dp[0][nums[0]] = 1;
            }
        }

        for(int i=1;i<nums.length;i++) {
            for(int j=0;j<=target;j++) {
                
                int notTake = dp[i-1][j];
                
                int take=0;
                if(nums[i]<=j) {
                    take = dp[i-1][j-nums[i]];
                }
                
                dp[i][j] = take+notTake;
            }
        }
        
        return dp[nums.length-1][target];
    }
}
