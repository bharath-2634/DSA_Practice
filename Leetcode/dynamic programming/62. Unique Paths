Question:https://leetcode.com/problems/unique-paths/description/

Solution:
class Solution {

    /* This is my recursive + Memoization Approach
    public int getUniquePaths(int m,int n,int[][] dp) {
        if(m==0 && n==0) return 1;

        if(m<0 || n<0) return 0;

        if(dp[m][n]!=0) return dp[m][n];

        int move1 = getUniquePaths(m-1,n,dp);
        int move2 = getUniquePaths(m,n-1,dp);

        return dp[m][n] = move1+move2;

    }

    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m+1][n+1];

        return getUniquePaths(m-1,n-1,dp);
    }
    */

    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m+1][n+1];

        for(int i=0; i<m; i++) dp[i][0] = 1;
        for(int j=0; j<n; j++) dp[0][j] = 1;

        for(int i=1;i<m;i++) {
            for(int j=1;j<n;j++) {
                int moveUp = dp[i-1][j];
                int moveDown = dp[i][j-1];
                dp[i][j] = moveUp + moveDown;
            }
        }

        return dp[m-1][n-1];
    }
}
