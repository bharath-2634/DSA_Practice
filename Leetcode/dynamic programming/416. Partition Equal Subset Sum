Question:https://leetcode.com/problems/partition-equal-subset-sum/

Solution:
class Solution {

    /* This is recursive + Memoization Approach
    public boolean getPartition(int[] nums,int target,int idx,Boolean[][] dp) {

        if(target==0) return true;

        if(idx>=nums.length-1 || target<0) {
            return false;
        }

        if(dp[idx][target]!=null) return dp[idx][target];

        if(getPartition(nums,target,idx+1,dp)) return true;

        if(getPartition(nums,target-nums[idx],idx+1,dp)) return true;

        return dp[idx][target] = false;

    }

    public boolean canPartition(int[] nums) {

        int total = 0;
        for(int num : nums) total+=num;

        if(total%2!=0) return false;
        
        int target = total/2;
        Boolean[][] dp = new Boolean[nums.length+1][target+1];

        return getPartition(nums,target,0,dp);
    }*/

    public boolean canPartition(int[] nums) {

        int total = 0;
        for(int num : nums) total+=num;

        if(total%2!=0) return false;
        
        int target = total/2;
        boolean[][] dp = new boolean[nums.length+1][target+1];

        for(int i=0;i<nums.length;i++) {
            dp[i][0] = true;
        }

        if(nums[0] <= target) dp[0][nums[0]] = true;

        for(int i=1;i<nums.length;i++) {
            for(int t=1;t<=target;t++) {
                boolean notTake = dp[i-1][t];
                boolean take = (nums[i]<=t) ? dp[i-1][t-nums[i]] : false;
                dp[i][t] = notTake || take;
            }
        }

        return dp[nums.length-1][target];
    }
}
