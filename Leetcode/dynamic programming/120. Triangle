Question:https://leetcode.com/problems/triangle/description/

Solution:
class Solution {

    /* This is my recursive + memoization approach
    public int getMinTotal(List<List<Integer>> triangle,int row,int col,int[][] dp) {
        if(row==triangle.size()-1) return triangle.get(row).get(col);
        
        if(dp[row][col]!=0) return dp[row][col];

        int moveLeft = triangle.get(row).get(col) + getMinTotal(triangle,row+1,col,dp);
        int moveRight = triangle.get(row).get(col) + getMinTotal(triangle,row+1,col+1,dp);

        return dp[row][col] = Math.min(moveLeft,moveRight);
    }

    public int minimumTotal(List<List<Integer>> triangle) {
        int[][] dp = new int[triangle.size()+1][triangle.size()+1];
        return getMinTotal(triangle,0,0,dp);
    }*/

    public int minimumTotal(List<List<Integer>> triangle) {
        int[][] dp = new int[triangle.size()+1][triangle.size()+1];

        dp[0][0] = triangle.get(0).get(0);

        for(int i=1;i<triangle.size();i++) {
            for(int j=0;j<=i;j++) {
                int moveLeft = (j<i)? dp[i-1][j] : Integer.MAX_VALUE;
                int moveRight = (j>0) ? dp[i-1][j-1] : Integer.MAX_VALUE;
                dp[i][j] = triangle.get(i).get(j) + Math.min(moveLeft,moveRight);
            }
        }

        int minCost = Integer.MAX_VALUE;
        for(int i=0;i<triangle.size();i++) {
            minCost = Math.min(minCost,dp[triangle.size()-1][i]);
        }

        return minCost;

    }
}
