Question:https://leetcode.com/problems/unique-paths-ii/description/

Solution:
class Solution {

    /*
    This is my recursion + Memoization Approach
    public int getUniquePaths(int[][] grid,int row,int col,int[][] dp) {

        if(row<0 || col<0) return 0;
        if(grid[row][col]==1) return 0;

        if(row==0 && col==0) return 1;
        
        if(dp[row][col]!=0) return dp[row][col];

        int moveUp = getUniquePaths(grid,row-1,col,dp);
        int moveDown = getUniquePaths(grid,row,col-1,dp);

        return dp[row][col] = moveUp + moveDown;
    }

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int[][] dp = new int[obstacleGrid.length+1][obstacleGrid[0].length+1];

        return getUniquePaths(obstacleGrid,obstacleGrid.length-1,obstacleGrid[0].length-1,dp);
    }*/

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int[][] dp = new int[obstacleGrid.length+1][obstacleGrid[0].length+1];

        dp[0][0] = obstacleGrid[0][0] == 1 ? 0 : 1;

        for (int i=1;i<obstacleGrid.length;i++) {
            if (obstacleGrid[i][0] == 1) dp[i][0] = 0;
            else dp[i][0] = dp[i-1][0];
        }

        for (int j=1;j<obstacleGrid[0].length;j++) {
            if (obstacleGrid[0][j] == 1) dp[0][j] = 0;
            else dp[0][j] = dp[0][j-1];
        }

        for(int i=1;i<obstacleGrid.length;i++) {
            for(int j=1;j<obstacleGrid[0].length;j++) {
                if(obstacleGrid[i][j]==1) {
                    dp[i][j] = 0;
                    continue;
                }
                int moveUp = dp[i-1][j];
                int moveDown = dp[i][j-1];
                dp[i][j] = moveUp + moveDown;
            }
        }

        return dp[obstacleGrid.length-1][obstacleGrid[0].length-1];
    }
}
