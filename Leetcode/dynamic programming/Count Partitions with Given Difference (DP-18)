Question:https://www.geeksforgeeks.org/problems/partitions-with-given-difference/1

Solution:

// class Solution {
    
//     public int findWays(int[] arr,int target,int idx,int[][] dp) {

//         if (idx == 0) {
//             if (target == 0 && arr[0] == 0) return 2;
//             if (target == 0 || arr[0] == target) return 1;
//             return 0;
//         }
        
//         if(dp[idx][target]!=0) return dp[idx][target];
        
//         int notTake = findWays(arr,target,idx-1,dp);
//         int take=0;
//         if(arr[idx]<=target) {
//             take = findWays(arr,target-arr[idx],idx-1,dp);
//         }
        
//         return dp[idx][target] = take + notTake;
//     }
    
//     int countPartitions(int[] arr, int d) {
        
//         int total_sum=0;
        
//         for(int num : arr) {
//             total_sum+=num;
//         }
        
//         if((total_sum-d)%2!=0 || (total_sum-d)<0 ) return 0;
        
//         int target = (total_sum-d)/2;
        
//         int[][] dp = new int[arr.length][target+1];
        
//         return findWays(arr,target,arr.length-1,dp);
//     }
// }

class Solution {
    
    int countPartitions(int[] nums,int d) {
        
        int total_sum=0;
        for(int num : nums) total_sum+=num;
        
        if((total_sum-d)%2!=0 || (total_sum-d)<0 ) return 0;
        int target = (total_sum-d)/2;
        
        int[][] dp = new int[nums.length][target+1];
        
        for(int i=0;i<nums.length;i++) {
            dp[i][0] = 1;
        }
        
        if (nums[0] == 0) {
            dp[0][0] = 2;
        } else {
            dp[0][0] = 1;
            if (nums[0] <= target) {
                dp[0][nums[0]] = 1;
            }
        }
        
        for(int i=1;i<nums.length;i++) {
            for(int j=0;j<=target;j++) {
                
                int notTake = dp[i-1][j];
                int take=0;
                if(nums[i]<=j) {
                    take = dp[i-1][j-nums[i]];
                }
                dp[i][j] = take+notTake;
            }
        }
        
        return dp[nums.length-1][target];
    }
}
